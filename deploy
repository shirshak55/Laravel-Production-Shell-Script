#!/usr/bin/env bash

export DEBIAN_FRONTEND=noninteractive

read -p "Enter username : " username
read -s -p "Enter password : " password
egrep "^$username" /etc/passwd >/dev/null
if [ $? -eq 0 ]; then
  echo "$username exists!"
  exit 1
else
  pass=$(perl -e 'print crypt($ARGV[0], "password")' $password)
  useradd -m -p $pass $username
  [ $? -eq 0 ] && echo "User has been added to system!" || echo "Failed to add a user!"
fi
  
  
# First we need to update to latest packages so there should be security and bug fixes

sudo apt update -y -qq
sudo apt upgrade -y -qq

# Then we will change droplet/virtual machine language 

echo "LC_ALL=en_US.UTF-8" >> /etc/default/locale
locale-gen en_US.UTF-8

# We will add software toolkit which is essenstial for compiling softwares etc.

apt-get install -y -qq software-properties-common curl

#After that in ubuntu repository php is usually old like 7.0 etc and nginx is also old so for the update we will need to add official repositories

apt-add-repository ppa:nginx/development -y -> /dev/null 2>&1
apt-add-repository ppa:ondrej/php -y > /dev/null 2>&1

#Now node js uses abit different approach for updating repository its like above command but abit different.

curl --silent --location https://deb.nodesource.com/setup_10.x | bash -

#We have added repositories but we haven't updated to latest repositories so we update repositories now

sudo apt update -qq -y

#now lets install software on vm

sudo apt-get install -qq -y build-essential dos2unix gcc git libmcrypt4 libpcre3-dev libpng-dev ntp unzip  make python2.7-dev python-pip re2c supervisor unattended-upgrades whois vim libnotify-bin pv cifs-utils mcrypt bash-completion zsh graphviz

#To change virtualbox/droplet time we type

ln -sf /usr/share/zoneinfo/UTC /etc/localtime

#We will install latest version of php

apt-get install -y -qq --allow-downgrades --allow-remove-essential --allow-change-held-packages \
php7.3-cli php7.3-dev \
php7.3-pgsql php7.3-sqlite3 php7.3-gd \
php7.3-curl \
php7.3-imap php7.3-mysql php7.3-mbstring \
php7.3-xml php7.3-zip php7.3-bcmath php7.3-soap \
php7.3-intl php7.3-readline

#We need to install dependency manager for php which is composer

curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer

#Nginx uses php fpm so lets install both nginx and phpfpm

apt-get install -y -qq --allow-downgrades --allow-remove-essential --allow-change-held-packages nginx php7.3-fpm

#This will remove default configuration of nginx (That message like your server is runnign etc. We will write this config)

rm /etc/nginx/sites-enabled/default
rm /etc/nginx/sites-available/default

#First lets create a user name

username="tmm"

#we have added it in variable so that we can reference it later.
#we need to create username first

adduser "$username"

#Lets create a directory name 

sudo mkdir -p /home/$username/.config/nginx

#Now we will create own configuration that will point to our laravel installation folder.
touch /home/$username/.config/nginx/nginx.conf

#We will give perssion to that user to access that folder using  change owner command
sudo chown -R $username:$username /home/$username

#But we created nginxconfig in our folder like we just created a folder in our ubuntu desktop but nginx don't read our destop it reads configuration from /etc/nginx/sites-available/*.conf file
#For that we will add shortcut to that folder so nginx will read that config

sudo ln -sf /home/$username/.config/nginx/nginx.conf /etc/nginx/conf.d/nginx.conf

#For interacting with ssl sites we need toinstall oepnssl

printf "[openssl]\n" | tee -a /etc/php/7.3/fpm/php.ini
printf "openssl.cainfo = /etc/ssl/certs/ca-certificates.crt\n" | tee -a /etc/php/7.3/fpm/php.ini

#Nginx repositories has screwed up the php fpm config so we need to sometime

cat > /etc/nginx/fastcgi_params << EOF
fastcgi_param	QUERY_STRING		\$query_string;
fastcgi_param	REQUEST_METHOD		\$request_method;
fastcgi_param	CONTENT_TYPE		\$content_type;
fastcgi_param	CONTENT_LENGTH		\$content_length;
fastcgi_param	SCRIPT_FILENAME		\$request_filename;
fastcgi_param	SCRIPT_NAME		\$fastcgi_script_name;
fastcgi_param	REQUEST_URI		\$request_uri;
fastcgi_param	DOCUMENT_URI		\$document_uri;
fastcgi_param	DOCUMENT_ROOT		\$document_root;
fastcgi_param	SERVER_PROTOCOL		\$server_protocol;
fastcgi_param	GATEWAY_INTERFACE	CGI/1.1;
fastcgi_param	SERVER_SOFTWARE		nginx/\$nginx_version;
fastcgi_param	REMOTE_ADDR		\$remote_addr;
fastcgi_param	REMOTE_PORT		\$remote_port;
fastcgi_param	SERVER_ADDR		\$server_addr;
fastcgi_param	SERVER_PORT		\$server_port;
fastcgi_param	SERVER_NAME		\$server_name;
fastcgi_param	HTTPS			\$https if_not_empty;
fastcgi_param	REDIRECT_STATUS		200;
EOF


# make php fpm to use user right. Like edima is user let php fpm to use edima permission

sed -i "s/user = www-data/user = $username/" /etc/php/7.3/fpm/pool.d/www.conf
sed -i "s/group = www-data/group = $username/" /etc/php/7.3/fpm/pool.d/www.conf

# now restrat the nginx service

sudo service nginx restart
sudo service php7.3-fpm restart

# Lets create a user . Remember we saved username at $username variaable

Install mysql
sudo apt install -y -qq mysql-server

# Change mysql root password

mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql --user=root --password=secret mysql

service mysql restart

# Handle Nginx
USER_DIR= "/home/$username"
mkdir $USER_DIR/website



cat > /home/$username/.config/nginx/nginx.conf << EOF
server {
    listen 80;
    server_name _;
    root $USER_DIR/website;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    index index.html index.htm index.php;

    charset utf-8;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ \.php$ {
        fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;
        fastcgi_index index.php;
        include fastcgi_params;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}
EOF

# Enable supervisor which is used to restart unresponsding apps.

systemctl enable supervisor.service
service supervisor start

# Disable root login
sed -i '/^PermitRootLogin[ \t]\+\w\+$/{ s//PermitRootLogin no/g; }' /etc/ssh/sshd_config
cp -r /root/.ssh /home/$username
chown -R $username:$username /home/$username/.ssh

# One last upgrade check
apt-get -y upgrade

# Clean Up
apt-get -y autoremove
apt-get -y clean


# We may have purchased lowest price machine having low ram. So we can create swap that will serve as ram purpose

/bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024
/sbin/mkswap /var/swap.1
/sbin/swapon /var/swap.1
